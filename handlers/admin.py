from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Command
from database.json_storage import db
from utils.keyboards import (
    get_admin_keyboard, 
    get_attendance_panel_keyboard, 
    get_manage_admins_keyboard, 
    get_team_management_keyboard, 
    get_members_selection_keyboard, 
    get_teams_points_keyboard,
    get_teams_edit_keyboard,
    get_team_edit_keyboard
)
from config import config
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pandas as pd
from io import BytesIO

class TeamCreation(StatesGroup):
    waiting_for_name = State()

class TeamMemberAdd(StatesGroup):
    waiting_for_team = State()
    waiting_for_username = State()

class AttendanceMarking(StatesGroup):
    marking = State()

class AdminManagement(StatesGroup):
    managing = State()

class TeamManagement(StatesGroup):
    selecting_members = State()
    entering_name = State()
    managing_points = State()
    entering_points = State()
    entering_reason = State()

class TeamEditing(StatesGroup):
    selecting_team = State()
    adding_member = State()
    confirming_delete = State()

async def admin_panel(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user or not user["is_admin"]:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await state.finish()
    
    text = "üëë –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:\n"
    text += "üìã –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö\n"
    text += "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ - —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
    text += "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
    text += "üìä –†–µ–π—Ç–∏–Ω–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞\n"
    text += "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    
    await message.answer(text, reply_markup=get_admin_keyboard())

async def start_attendance_marking(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
    users = await db.get_all_users()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(users=users, marked={})
    
    text = "üìã –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞—á–æ–∫, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å:\n"
    text += "‚úÖ - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
    text += "‚ùå - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
    text += "‚ö†Ô∏è - —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞\n\n"
    text += "–ü–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É'"
    
    keyboard = get_attendance_panel_keyboard(users)
    await callback_query.message.edit_text(text, reply_markup=keyboard)
    await AttendanceMarking.marking.set()

async def handle_attendance_mark(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        users = data.get('users', [])
        marked = data.get('marked', {})
        
        if callback_query.data.startswith("mark_"):
            _, status, user_id = callback_query.data.split('_')
            user_id = int(user_id)
            marked[user_id] = status
            await state.update_data(marked=marked)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ edit_reply_markup –≤–º–µ—Å—Ç–æ edit_text
            await callback_query.message.edit_reply_markup(
                reply_markup=get_attendance_panel_keyboard(users, marked)
            )
            await callback_query.answer()
            return
        
        elif callback_query.data == "finish_attendance":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã
            if len(marked) < len(users):
                await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
            attendance = await db.get_attendance()
            current_date = datetime.now().date().isoformat()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            present_users = []
            absent_users = []
            excused_users = []
            
            for user_id, status in marked.items():
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await db.mark_attendance(
                    user_id=user_id,
                    status=status,
                    marked_by=callback_query.from_user.id
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = next((u for u in users if u["telegram_id"] == user_id), None)
                if user:
                    if status == "present":
                        present_users.append(user["username"])
                    elif status == "absent":
                        absent_users.append(user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    elif status == "excused":
                        excused_users.append(user["username"])
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
            teams = await db.get_all_teams()
            for team in teams:
                team_attendance = {"present": 0, "absent": 0, "excused": 0}
                
                for member_id in team['members']:
                    member_status = marked.get(int(member_id))
                    if member_status in ["present", "excused"]:
                        team_attendance["present"] += 1
                    elif member_status == "absent":
                        team_attendance["absent"] += 1
                
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª - —Å–Ω–∏–º–∞–µ–º –±–∞–ª–ª—ã
                if team_attendance["absent"] > 0:
                    await db.add_team_points(
                        team_id=team['id'],
                        points=-2,
                        reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –∑–∞–Ω—è—Ç–∏—è",
                        admin_id=callback_query.from_user.id
                    )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
            result_text = (
                f"üìã –û–¢–ß–ï–¢ –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò\n"
                f"{'‚îÄ' * 30}\n"
                f"üìÖ {current_time}\n\n"
                
                "‚úÖ –ü–†–ò–°–£–¢–°–¢–í–û–í–ê–õ–ò:\n"
                f"{''.join(f'‚îî {user}\n' for user in present_users) if present_users else '‚îî (–Ω–µ—Ç)\n'}\n"
                
                "‚ùå –û–¢–°–£–¢–°–¢–í–û–í–ê–õ–ò:\n"
                f"{''.join(f'‚îî {user['username']}{' ‚ö†Ô∏è ' + str(attendance[current_date][str(user['telegram_id'])]['consecutive_absences']) + ' —Ä–∞–∑ –ø–æ–¥—Ä—è–¥' if attendance[current_date][str(user['telegram_id'])]['consecutive_absences'] > 1 else ''}\n' for user in absent_users) if absent_users else '‚îî (–Ω–µ—Ç)\n'}\n"
                
                "‚ö†Ô∏è –ü–û –£–í–ê–ñ–ò–¢–ï–õ–¨–ù–û–ô –ü–†–ò–ß–ò–ù–ï:\n"
                f"{''.join(f'‚îî {user}\n' for user in excused_users) if excused_users else '‚îî (–Ω–µ—Ç)\n'}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            await callback_query.bot.send_message(config.GROUP_CHAT_ID, result_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            await callback_query.message.edit_text(
                "–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=get_admin_keyboard()
            )
            await state.finish()
        
        elif callback_query.data == "back_to_admin":
            await callback_query.message.edit_text(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=get_admin_keyboard()
            )
            await state.finish()
        
        await callback_query.answer()
    except Exception as e:
        print(f"Error in handle_attendance_mark: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

async def cmd_create_team(message: types.Message):
    user = await db.get_user(message.from_user.id)
    if not user or not user["is_admin"]:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await TeamCreation.waiting_for_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:")

async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text
    current_season = datetime.now().month
    
    team = await db.create_team(name=team_name, season=current_season)
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await state.finish()

async def cmd_add_member(message: types.Message):
    user = await db.get_user(message.from_user.id)
    if not user or not user["is_admin"]:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    teams = await db.get_all_teams(season=datetime.now().month)
    if not teams:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for team in teams:
        keyboard.add(InlineKeyboardButton(
            text=team["name"],
            callback_data=f"select_team_{team['id']}"
        ))
    
    await TeamMemberAdd.waiting_for_team.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=keyboard)

async def process_team_selection(callback: types.CallbackQuery, state: FSMContext):
    team_id = callback.data.split('_')[2]
    await state.update_data(team_id=team_id)
    await TeamMemberAdd.waiting_for_username.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–±–µ–∑ @):")
    await callback.answer()

async def process_member_username(message: types.Message, state: FSMContext):
    username = message.text.strip('@')
    data = await state.get_data()
    team_id = data['team_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users = await db.get_all_users()
    user = next((u for u in users if u["username"] == username), None)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ (/start)")
        await state.finish()
        return
    
    await db.add_team_member(team_id, user["telegram_id"])
    team = await db.get_team(team_id)
    await message.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É {team['name']}!")
    await state.finish()

async def manage_admins(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_admin":
        await callback_query.message.edit_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –õ–µ–±–µ–¥–µ–≤—ã–º –ê–Ω–¥—Ä–µ–µ–º
    user = await db.get_user(callback_query.from_user.id)
    if not user or user["username"] != "–õ–µ–±–µ–¥–µ–≤ –ê–Ω–¥—Ä–µ–π":
        await callback_query.answer("–¢–æ–ª—å–∫–æ –õ–µ–±–µ–¥–µ–≤ –ê–Ω–¥—Ä–µ–π –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_all_users()
    
    text = "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∞:\n"
    text += "üëë - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
    text += "‚¨úÔ∏è - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    keyboard = get_manage_admins_keyboard(users)
    await callback_query.message.edit_text(text, reply_markup=keyboard)
    await AdminManagement.managing.set()

async def toggle_admin_rights(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –õ–µ–±–µ–¥–µ–≤—ã–º –ê–Ω–¥—Ä–µ–µ–º
    user = await db.get_user(callback_query.from_user.id)
    if not user or user["username"] != "–õ–µ–±–µ–¥–µ–≤ –ê–Ω–¥—Ä–µ–π":
        await callback_query.answer("–¢–æ–ª—å–∫–æ –õ–µ–±–µ–¥–µ–≤ –ê–Ω–¥—Ä–µ–π –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        target_id = int(callback_query.data.replace("toggle_admin_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user = await db.get_user(target_id)
        if not target_user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
        new_status = await db.toggle_admin_status(target_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.get_all_users()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_manage_admins_keyboard(users)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        status_text = "–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if new_status else "—Å–Ω—è—Ç —Å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        await callback_query.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['username']} {status_text}",
            show_alert=True
        )
    except Exception as e:
        print(f"Error in toggle_admin_rights: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤", show_alert=True)

async def team_management(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_admin":
        await callback_query.message.edit_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return
    elif callback_query.data == "back_to_team_management":
        keyboard = get_team_management_keyboard()
        await callback_query.message.edit_text(
            "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return
    elif callback_query.data == "back_to_teams_list":
        teams = await db.get_all_teams()
        keyboard = get_teams_edit_keyboard(teams)
        await callback_query.message.edit_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        return

    keyboard = get_team_management_keyboard()
    await callback_query.message.edit_text(
        "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback_query.answer()

async def start_team_creation(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    available_users = await db.get_available_members()
    if len(available_users) < 2:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!", show_alert=True)
        return

    keyboard = get_members_selection_keyboard(available_users)
    await callback_query.message.edit_text(
        "üë• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–º–∏–Ω–∏–º—É–º 2):",
        reply_markup=keyboard
    )
    await TeamManagement.selecting_members.set()
    await state.update_data(selected_members=[])
    await callback_query.answer()

async def toggle_member_selection(callback_query: types.CallbackQuery, state: FSMContext):
    member_id = int(callback_query.data.replace("select_member_", ""))
    data = await state.get_data()
    selected_members = data.get('selected_members', [])

    if member_id in selected_members:
        selected_members.remove(member_id)
    else:
        selected_members.append(member_id)

    await state.update_data(selected_members=selected_members)
    available_users = await db.get_available_members()
    keyboard = get_members_selection_keyboard(available_users, selected_members)
    
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()

async def confirm_member_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_members = data.get('selected_members', [])

    if len(selected_members) < 2:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞!", show_alert=True)
        return

    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:")
    await TeamManagement.entering_name.set()
    await callback_query.answer()

async def process_team_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_members = data.get('selected_members', [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = await db.create_team(name=message.text, members=selected_members)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members_names = []
    for member_id in selected_members:
        user = await db.get_user(member_id)
        if user:
            members_names.append(user['username'])
    
    await message.answer(
        f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"{team['name']}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(f"üë§ {name}" for name in members_names)
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = get_team_management_keyboard()
    await message.answer(
        "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.finish()

async def show_teams_for_points(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        teams = await db.get_all_teams()
        if not teams:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!", show_alert=True)
            return

        keyboard = get_teams_points_keyboard(teams)
        await callback_query.message.edit_text(
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –±–∞–ª–ª–æ–≤:",
            reply_markup=keyboard
        )
        await TeamManagement.managing_points.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.answer()
    except Exception as e:
        print(f"Error in show_teams_for_points: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def show_team_points_actions(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        team_id = callback_query.data.replace("manage_team_points_", "")
        team = await db.get_team(team_id)
        
        if not team:
            await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        await state.update_data(team_id=team_id)
        
        text = f"‚≠êÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"\n"
        text += f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {team['points']} –±–∞–ª–ª–æ–≤\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:\n"
        text += "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n"
        text += "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: -3)"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teams_list")
            )
        )
        await TeamManagement.entering_points.set()
        await callback_query.answer()
    except Exception as e:
        print(f"Error in show_team_points_actions: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_points_action(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        if callback_query.data.startswith("custom_points_"):
            team_id = callback_query.data.split('_')[2]
            await state.update_data(team_id=team_id)
            await callback_query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–Ω—è—Ç–∏—è):"
            )
            await TeamManagement.entering_points.set()
        else:
            action, team_id, points = callback_query.data.split('_')
            points = int(points)
            if action == "remove":
                points = -points
            
            await state.update_data(
                points_to_add=points,
                team_id=team_id
            )
            
            await callback_query.message.edit_text(
                f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É {'–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è' if points > 0 else '—Å–Ω—è—Ç–∏—è'} {abs(points)} –±–∞–ª–ª–æ–≤:"
            )
            await TeamManagement.entering_reason.set()
        await callback_query.answer()
    except Exception as e:
        print(f"Error in handle_points_action: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def process_custom_points(message: types.Message, state: FSMContext):
    try:
        points = int(message.text)
        data = await state.get_data()
        team_id = data['team_id']
        team = await db.get_team(team_id)
        
        if not team:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.finish()
            return
        
        await state.update_data(points_to_add=points)
        await message.answer(
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É {'–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è' if points > 0 else '—Å–Ω—è—Ç–∏—è'} {abs(points)} –±–∞–ª–ª–æ–≤:"
        )
        await TeamManagement.entering_reason.set()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n"
            "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n"
            "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: -3)"
        )
    except Exception as e:
        print(f"Error in process_custom_points: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def process_points_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    points = data['points_to_add']
    team_id = data['team_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –∫–æ–º–∞–Ω–¥—ã
    team = await db.add_team_points(
        team_id=team_id,
        points=points,
        reason=message.text,
        admin_id=message.from_user.id
    )
    
    if team:
        await message.answer(
            f"‚úÖ –ë–∞–ª–ª—ã {'–Ω–∞—á–∏—Å–ª–µ–Ω—ã' if points > 0 else '—Å–Ω—è—Ç—ã'}!\n\n"
            f"–ö–æ–º–∞–Ω–¥–∞: {team['name']}\n"
            f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '–°–Ω—è—Ç–æ'}: {abs(points)} –±–∞–ª–ª–æ–≤\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {team['points']} –±–∞–ª–ª–æ–≤"
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥
    teams = await db.get_all_teams()
    keyboard = get_teams_points_keyboard(teams)
    await message.answer(
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –±–∞–ª–ª–æ–≤:",
        reply_markup=keyboard
    )
    await state.finish()

async def show_points_history(callback_query: types.CallbackQuery):
    teams = await db.get_all_teams()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for team in teams:
        keyboard.add(InlineKeyboardButton(
            f"üìä {team['name']} ({team['points']} –±–∞–ª–ª–æ–≤)", 
            callback_data=f"show_team_history_{team['id']}"
        ))
    
    keyboard.add(
        InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", callback_data="download_history"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_team_management")
    )
    
    await callback_query.message.edit_text(
        "üìã –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:",
        reply_markup=keyboard
    )

async def show_team_history(callback_query: types.CallbackQuery):
    try:
        team_id = callback_query.data.replace("show_team_history_", "")
        team = await db.get_team(team_id)
        if not team:
            await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        history = await db.get_team_points_history(team_id)
        
        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"\n"
        text += f"{'‚îÄ' * 30}\n\n"
        text += f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {team['points']} –±–∞–ª–ª–æ–≤\n\n"
        
        if not history:
            text += "üìã –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π
            for entry in reversed(history[-5:]):
                sign = "+" if entry["points"] > 0 else ""
                text += f"{'üíö' if entry['points'] > 0 else '‚ù§Ô∏è'} {sign}{entry['points']} –±–∞–ª–ª–æ–≤\n"
                text += f"‚îî –ü—Ä–∏—á–∏–Ω–∞: {entry['reason']}\n"
                text += f"‚îî üïí {datetime.fromisoformat(entry['timestamp']).strftime('%d.%m.%Y %H:%M')}\n\n"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥", callback_data="points_history"),
            InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_team_management")
        )
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        print(f"Error in show_team_history: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

async def download_points_history(callback_query: types.CallbackQuery):
    teams = await db.get_all_teams()
    if not teams:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏!", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    data = []
    for team in teams:
        history = await db.get_team_points_history(team['id'])
        for record in history:
            admin = await db.get_user(record['admin_id'])
            admin_name = admin['username'] if admin else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            data.append({
                '–ö–æ–º–∞–Ω–¥–∞': team['name'],
                '–ë–∞–ª–ª—ã': record['points'],
                '–ü—Ä–∏—á–∏–Ω–∞': record['reason'],
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': admin_name,
                '–î–∞—Ç–∞': datetime.fromisoformat(record['timestamp']).strftime("%d.%m.%Y %H:%M")
            })
    
    if not data:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df = pd.DataFrame(data)
    
    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤')
    
    excel_buffer.seek(0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    current_date = datetime.now().strftime("%Y%m%d")
    filename = f"points_history_{current_date}.xlsx"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback_query.message.answer_document(
        document=("points_history.xlsx", excel_buffer),
        caption="üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
    )
    await callback_query.answer()

async def show_teams_for_edit(callback_query: types.CallbackQuery):
    teams = await db.get_all_teams()
    if not teams:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!", show_alert=True)
        return

    keyboard = get_teams_edit_keyboard(teams)
    await callback_query.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await TeamEditing.selecting_team.set()
    await callback_query.answer()

async def edit_team(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_teams_list":
        teams = await db.get_all_teams()
        keyboard = get_teams_edit_keyboard(teams)
        await callback_query.message.edit_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        return

    team_id = callback_query.data.replace("edit_team_", "")
    team = await db.get_team(team_id)
    
    if not team:
        await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    await state.update_data(current_team_id=team_id)
    
    members = []
    for member_id in team['members']:
        user = await db.get_user(int(member_id))
        if user:
            members.append(user)
    
    text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"\n\n"
    text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"
    
    keyboard = get_team_edit_keyboard(team, members)
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def remove_team_member(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –§–æ—Ä–º–∞—Ç: remove_member_{team_id}_{user_id}
        parts = callback_query.data.split('_')
        if len(parts) == 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            team_id = parts[2]
            user_id = int(parts[3])
            
            print(f"Removing user {user_id} from team {team_id}")
            
            # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            await db.remove_team_member(team_id, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            team = await db.get_team(team_id)
            if not team:
                await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            members = []
            for member_id in team['members']:
                user = await db.get_user(int(member_id))
                if user:
                    members.append(user)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"\n\n"
            text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ\n"
            text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"
            
            keyboard = get_team_edit_keyboard(team, members)
            await callback_query.message.edit_text(text, reply_markup=keyboard)
            await callback_query.answer("–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã")
        else:
            await callback_query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        print(f"Error in remove_team_member: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True)

async def delete_team(callback_query: types.CallbackQuery):
    team_id = callback_query.data.replace("delete_team_", "")
    await db.delete_team(team_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥
    teams = await db.get_all_teams()
    keyboard = get_teams_edit_keyboard(teams)
    await callback_query.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞")

async def start_add_member(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        team_id = callback_query.data.replace("add_member_", "")
        team = await db.get_team(team_id)
        
        if not team:
            await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await db.get_all_users()
        team_members = set(int(m) for m in team['members'])
        available_users = [u for u in all_users if u['telegram_id'] not in team_members]
        
        if not available_users:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!", show_alert=True)
            return
        
        await state.update_data(current_team_id=team_id)
        keyboard = get_members_selection_keyboard(available_users)
        
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É \"{team['name']}\":",
            reply_markup=keyboard
        )
        await TeamEditing.adding_member.set()
    except Exception as e:
        print(f"Error in start_add_member: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def add_team_member(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        member_id = int(callback_query.data.replace("select_member_", ""))
        data = await state.get_data()
        team_id = data.get('current_team_id')
        
        if not team_id:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await db.add_team_member(team_id, member_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        team = await db.get_team(team_id)
        members = []
        for member_id in team['members']:
            user = await db.get_user(int(member_id))
            if user:
                members.append(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"\n\n"
        text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"
        
        keyboard = get_team_edit_keyboard(team, members)
        await callback_query.message.edit_text(text, reply_markup=keyboard)
        await callback_query.answer("–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É")
        await state.finish()
    except Exception as e:
        print(f"Error in add_team_member: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True)

async def show_rating(callback_query: types.CallbackQuery):
    teams = await db.get_all_teams()
    if not teams:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!", show_alert=True)
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –±–∞–ª–ª–∞–º
    teams_sorted = sorted(teams, key=lambda x: x['points'], reverse=True)
    
    text = "üèÜ –†–ï–ô–¢–ò–ù–ì –ö–û–ú–ê–ù–î\n\n"
    
    for i, team in enumerate(teams_sorted, 1):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
        prefix = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
        text += f"{prefix} {team['name']}\n"
        text += f"‚îî {team['points']} –±–∞–ª–ª–æ–≤\n"
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        members = []
        for member_id in team['members']:
            user = await db.get_user(int(member_id))
            if user:
                members.append(user['username'])
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="publish_rating"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)
    await callback_query.answer()

async def publish_rating(callback_query: types.CallbackQuery):
    teams = await db.get_all_teams()
    teams_sorted = sorted(teams, key=lambda x: x['points'], reverse=True)
    
    text = "üìä –†–ï–ô–¢–ò–ù–ì –ö–û–ú–ê–ù–î\n\n"
    
    for i, team in enumerate(teams_sorted, 1):
        prefix = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
        text += f"{prefix} {team['name']}\n"
        text += f"‚îî {team['points']} –±–∞–ª–ª–æ–≤\n"
        members = []
        for member_id in team['members']:
            user = await db.get_user(int(member_id))
            if user:
                members.append(user['username'])
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}\n\n"
    
    await callback_query.bot.send_message(config.GROUP_CHAT_ID, text)
    await callback_query.answer("–†–µ–π—Ç–∏–Ω–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –æ–±—â–µ–º —á–∞—Ç–µ!")

async def show_members_statistics(callback_query: types.CallbackQuery):
    try:
        users = await db.get_all_users()
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        for user in users:
            # –î–æ–±–∞–≤–ª—è–µ–º callback_data —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            keyboard.add(InlineKeyboardButton(
                f"{'üëë' if user['is_admin'] else 'üë§'} {user['username']}", 
                callback_data=f"user_stats_{user['telegram_id']}"
            ))
        
        keyboard.add(
            InlineKeyboardButton("üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–µ—â–µ–Ω–∏–π", callback_data="publish_attendance_rating"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        )
        
        await callback_query.message.edit_text(
            "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í\n"
            f"{'‚îÄ' * 30}\n\n"
            "üëë - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "üë§ - —É—á–∞—Å—Ç–Ω–∏–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"Error in show_members_statistics: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)

async def show_user_stats(callback_query: types.CallbackQuery):
    try:
        user_id = int(callback_query.data.replace("user_stats_", ""))
        user = await db.get_user(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        stats = await db.get_user_attendance_stats(user_id)
        
        text = (
            f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π: {user['username']}\n"
            f"{'‚îÄ' * 30}\n\n"
            f"üìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {stats['total_marked']}\n\n"
            f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['present']} ({(stats['present']/stats['total_marked']*100):.1f}% –µ—Å–ª–∏ –±—ã–ª)\n"
            f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['absent']} ({(stats['absent']/stats['total_marked']*100):.1f}% –µ—Å–ª–∏ –±—ã–ª)"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –ø–æ–¥—Ä—è–¥
        if stats['consecutive_absences'] > 1:
            text += f" ‚ö†Ô∏è {stats['consecutive_absences']} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥"
        
        text += (
            f"\n‚ö†Ô∏è –ü–æ —É–≤. –ø—Ä–∏—á–∏–Ω–µ: {stats['excused']} ({(stats['excused']/stats['total_marked']*100):.1f}% –µ—Å–ª–∏ –±—ã–ª)\n\n"
            f"üìà –û–±—â–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {stats['attendance_rate']:.1f}%\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        if stats['attendance_rate'] >= 90:
            text += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å!"
        elif stats['attendance_rate'] >= 75:
            text += "\nüëç –•–æ—Ä–æ—à–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
        elif stats['attendance_rate'] >= 50:
            text += "\n‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
        else:
            text += "\n‚ùóÔ∏è –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_members_statistics"),
            InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")
        )
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        print(f"Error in show_user_stats: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

async def publish_attendance_rating(callback_query: types.CallbackQuery):
    users = await db.get_all_users()
    attendance = await db.get_attendance()
    
    stats = []
    for user in users:
        total_marked = 0
        present = 0
        
        for date in attendance:
            if str(user['telegram_id']) in attendance[date]:
                total_marked += 1
                if attendance[date][str(user['telegram_id'])]["status"] == "present":
                    present += 1
        
        if total_marked > 0:
            attendance_rate = (present / total_marked * 100)
            stats.append((user['username'], attendance_rate, present, total_marked))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏–π
    stats.sort(key=lambda x: x[1], reverse=True)
    
    text = "üìä –†–ï–ô–¢–ò–ù–ì –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò\n"
    text += f"{'‚îÄ' * 30}\n\n"
    
    for i, (username, rate, present, total) in enumerate(stats, 1):
        prefix = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
        stars = "‚≠êÔ∏è" * (5 if rate >= 90 else 4 if rate >= 75 else 3 if rate >= 60 else 2 if rate >= 40 else 1)
        text += f"{prefix} {username}\n"
        text += f"‚îî {rate:.1f}% ({present}/{total}) {stars}\n\n"
    
    await callback_query.bot.send_message(config.GROUP_CHAT_ID, text)
    await callback_query.answer("–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–µ—â–µ–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_panel, commands=["admin"], state="*")
    dp.register_callback_query_handler(manage_admins, text="manage_admins")
    dp.register_callback_query_handler(manage_admins, text="back_to_admin", state=AdminManagement.managing)
    dp.register_callback_query_handler(
        toggle_admin_rights,
        lambda c: c.data.startswith("toggle_admin_"),
        state=AdminManagement.managing
    )
    dp.register_callback_query_handler(start_attendance_marking, text="mark_attendance")
    dp.register_callback_query_handler(
        handle_attendance_mark,
        lambda c: c.data.startswith(("mark_", "finish_", "back_")),
        state=AttendanceMarking.marking
    )
    dp.register_message_handler(cmd_create_team, commands=["create_team"])
    dp.register_message_handler(cmd_add_member, commands=["add_member"])
    dp.register_callback_query_handler(process_team_selection, 
                                     lambda c: c.data.startswith("select_team_"),
                                     state=TeamMemberAdd.waiting_for_team)
    dp.register_message_handler(process_member_username, 
                              state=TeamMemberAdd.waiting_for_username)
    dp.register_callback_query_handler(team_management, text="manage_teams")
    dp.register_callback_query_handler(start_team_creation, text="create_team")
    dp.register_callback_query_handler(
        toggle_member_selection,
        lambda c: c.data.startswith("select_member_"),
        state=TeamManagement.selecting_members
    )
    dp.register_callback_query_handler(
        confirm_member_selection,
        text="confirm_members",
        state=TeamManagement.selecting_members
    )
    dp.register_message_handler(
        process_team_name,
        state=TeamManagement.entering_name
    )
    dp.register_callback_query_handler(show_teams_for_points, text="manage_points")
    dp.register_callback_query_handler(
        show_team_points_actions,
        lambda c: c.data.startswith("manage_team_points_")
    )
    dp.register_callback_query_handler(
        handle_points_action,
        lambda c: c.data.startswith(("add_points_", "remove_points_", "custom_points_")),
        state=TeamManagement.managing_points
    )
    dp.register_message_handler(
        process_custom_points,
        state=TeamManagement.entering_points
    )
    dp.register_message_handler(
        process_points_reason,
        state=TeamManagement.entering_reason
    )
    dp.register_callback_query_handler(show_points_history, text="points_history")
    dp.register_callback_query_handler(
        download_points_history,
        text="download_history",
        state="*"
    )
    dp.register_callback_query_handler(
        team_management,
        lambda c: c.data in ["back_to_admin", "back_to_team_management", "back_to_teams_list"],
        state="*"
    )
    dp.register_callback_query_handler(show_teams_for_edit, text="edit_teams")
    dp.register_callback_query_handler(
        edit_team,
        lambda c: c.data.startswith("edit_team_"),
        state=TeamEditing.selecting_team
    )
    dp.register_callback_query_handler(
        remove_team_member,
        lambda c: c.data.startswith("remove_member_"),
        state="*"
    )
    dp.register_callback_query_handler(
        delete_team,
        lambda c: c.data.startswith("delete_team_"),
        state="*"
    )
    dp.register_callback_query_handler(
        start_add_member,
        lambda c: c.data.startswith("add_member_"),
        state="*"
    )
    dp.register_callback_query_handler(
        add_team_member,
        lambda c: c.data.startswith("select_member_"),
        state=TeamEditing.adding_member
    )
    dp.register_callback_query_handler(show_rating, text="show_rating")
    dp.register_callback_query_handler(publish_rating, text="publish_rating")
    dp.register_callback_query_handler(
        show_members_statistics, 
        text="show_members_statistics",
        state="*"
    )
    dp.register_callback_query_handler(
        show_user_stats, 
        lambda c: c.data.startswith("user_stats_"),
        state="*"
    )
    dp.register_callback_query_handler(publish_attendance_rating, text="publish_attendance_rating") 