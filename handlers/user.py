from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from database.json_storage import db
from utils.keyboards import get_user_keyboard
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

async def user_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = await db.get_user(message.from_user.id)
    if not user:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await db.get_user_attendance_stats(message.from_user.id)
    
    text = (
        f"üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
        f"{'‚îÄ' * 30}\n\n"
        f"üìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {stats['total_marked']}\n\n"
        f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['present']} ({(stats['present']/stats['total_marked']*100):.1f}%)\n"
        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['absent']} ({(stats['absent']/stats['total_marked']*100):.1f}%)"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –ø–æ–¥—Ä—è–¥
    if stats['consecutive_absences'] > 1:
        text += f" ‚ö†Ô∏è {stats['consecutive_absences']} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥"
    
    text += (
        f"\n‚ö†Ô∏è –ü–æ —É–≤. –ø—Ä–∏—á–∏–Ω–µ: {stats['excused']} ({(stats['excused']/stats['total_marked']*100):.1f}%)\n\n"
        f"üìà –û–±—â–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {stats['attendance_rate']:.1f}%\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    if stats['attendance_rate'] >= 90:
        text += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å!"
    elif stats['attendance_rate'] >= 75:
        text += "\nüëç –•–æ—Ä–æ—à–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    elif stats['attendance_rate'] >= 50:
        text += "\n‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    else:
        text += "\n‚ùóÔ∏è –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    
    keyboard = get_user_keyboard()
    await message.answer(text, reply_markup=keyboard)

async def show_teams_rating(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥"""
    teams = await db.get_all_teams()
    teams_sorted = sorted(teams, key=lambda x: x['points'], reverse=True)
    
    text = "üìä –†–ï–ô–¢–ò–ù–ì –ö–û–ú–ê–ù–î\n\n"
    
    for i, team in enumerate(teams_sorted, 1):
        prefix = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
        text += f"{prefix} {team['name']}\n"
        text += f"‚îî {team['points']} –±–∞–ª–ª–æ–≤\n"
        members = []
        for member_id in team['members']:
            user = await db.get_user(int(member_id))
            if user:
                members.append(user['username'])
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    await callback_query.message.edit_text(text, reply_markup=keyboard)

def format_user_stats(stats: dict, user: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = (
        f"üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
        f"{'‚îÄ' * 30}\n\n"
        f"üìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {stats['total_marked']}\n\n"
        f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['present']} ({(stats['present']/stats['total_marked']*100):.1f}%)\n"
        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {stats['absent']} ({(stats['absent']/stats['total_marked']*100):.1f}%)"
    )
    
    if stats['consecutive_absences'] > 1:
        text += f" ‚ö†Ô∏è {stats['consecutive_absences']} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥"
    
    text += (
        f"\n‚ö†Ô∏è –ü–æ —É–≤. –ø—Ä–∏—á–∏–Ω–µ: {stats['excused']} ({(stats['excused']/stats['total_marked']*100):.1f}%)\n\n"
        f"üìà –û–±—â–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {stats['attendance_rate']:.1f}%\n"
    )
    
    if stats['attendance_rate'] >= 90:
        text += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å!"
    elif stats['attendance_rate'] >= 75:
        text += "\nüëç –•–æ—Ä–æ—à–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    elif stats['attendance_rate'] >= 50:
        text += "\n‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    else:
        text += "\n‚ùóÔ∏è –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"
    
    return text

async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await db.get_user(callback_query.from_user.id)
    if not user:
        return await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    stats = await db.get_user_attendance_stats(user['telegram_id'])
    text = format_user_stats(stats, user)
    await callback_query.message.edit_text(text, reply_markup=get_user_keyboard())

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(user_menu, commands=["menu"], state="*")
    dp.register_callback_query_handler(show_teams_rating, text="show_teams_rating", state="*")
    dp.register_callback_query_handler(back_to_menu, text="back_to_menu", state="*") 