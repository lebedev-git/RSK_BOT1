from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List

def get_admin_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìã –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö", callback_data="mark_attendance"),
        InlineKeyboardButton("üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏", callback_data="manage_teams"),
        InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
        InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥", callback_data="show_rating"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="show_members_statistics")
    )
    return keyboard

def get_attendance_status_keyboard(user_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"attend_present_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"attend_absent_{user_id}"),
        InlineKeyboardButton("‚ñ≥ –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è", callback_data=f"attend_excused_{user_id}")
    )
    return keyboard

def get_attendance_panel_keyboard(users: list, marked: dict = None) -> InlineKeyboardMarkup:
    if marked is None:
        marked = {}
    
    keyboard = InlineKeyboardMarkup(row_width=3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–≤–µ—Ä—Ö—É
    keyboard.row(
        InlineKeyboardButton("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ ‚úÖ", callback_data="status_header"),
        InlineKeyboardButton("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ‚ùå", callback_data="status_header"),
        InlineKeyboardButton("–£–≤. –ø—Ä–∏—á–∏–Ω–∞ ‚ö†Ô∏è", callback_data="status_header")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    keyboard.row(InlineKeyboardButton("‚îÄ" * 40, callback_data="divider"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for user in users:
        user_id = str(user['telegram_id'])
        status = marked.get(int(user_id))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∏ —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
        row = [
            InlineKeyboardButton(user['username'], callback_data=f"user_{user_id}"),
            InlineKeyboardButton("‚¨úÔ∏è" if status != "present" else "‚úÖ", callback_data=f"mark_present_{user_id}"),
            InlineKeyboardButton("‚¨úÔ∏è" if status != "absent" else "‚ùå", callback_data=f"mark_absent_{user_id}"),
            InlineKeyboardButton("‚¨úÔ∏è" if status != "excused" else "‚ö†Ô∏è", callback_data=f"mark_excused_{user_id}")
        ]
        keyboard.row(*row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    keyboard.row(InlineKeyboardButton("‚îÄ" * 40, callback_data="divider"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É ‚úÖ", callback_data="finish_attendance"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    
    return keyboard

def get_manage_admins_keyboard(users: list) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for user in users:
        admin_status = "üëë" if user["is_admin"] else "‚¨úÔ∏è"
        keyboard.row(
            InlineKeyboardButton(f"{user['username']}", callback_data=f"user_info_{user['telegram_id']}"),
            InlineKeyboardButton(admin_status, callback_data=f"toggle_admin_{user['telegram_id']}")
        )
    
    keyboard.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    return keyboard

def get_team_management_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team"),
        InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="edit_teams"),
        InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏", callback_data="manage_points"),
        InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", callback_data="points_history"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    return keyboard

def get_teams_edit_keyboard(teams: list) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    for team in teams:
        keyboard.add(
            InlineKeyboardButton(f"‚úèÔ∏è {team['name']}", callback_data=f"edit_team_{team['id']}")
        )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_team_management"))
    return keyboard

def get_team_edit_keyboard(team: dict, members: list) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
    for member in members:
        keyboard.add(
            InlineKeyboardButton(
                f"‚ùå {member['username']}", 
                callback_data=f"remove_member_{team['id']}_{member['telegram_id']}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_member_{team['id']}"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"delete_team_{team['id']}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teams_edit")
    )
    return keyboard

def get_members_selection_keyboard(users: list, selected: List[int] = None) -> InlineKeyboardMarkup:
    if selected is None:
        selected = []
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for user in users:
        mark = "‚úÖ" if user["telegram_id"] in selected else "‚¨úÔ∏è"
        keyboard.add(
            InlineKeyboardButton(
                f"{mark} {user['username']}", 
                callback_data=f"select_member_{user['telegram_id']}"
            )
        )
    
    keyboard.row(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_members"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_selection")
    )
    return keyboard

def get_teams_points_keyboard(teams: list) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    for team in teams:
        keyboard.add(
            InlineKeyboardButton(
                f"{team['name']} ({team['points']} –±–∞–ª–ª–æ–≤)", 
                callback_data=f"manage_team_points_{team['id']}"
            )
        )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_team_management"))
    return keyboard 